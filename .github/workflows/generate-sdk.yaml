name: Generate SDK

on:
  workflow_dispatch: # Allows manual triggering
  repository_dispatch:
    types: [generate-sdk]

jobs:
  generate_sdks:
    runs-on: ubuntu-latest
    env:
      LANGUAGE: python

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download OpenAPI file from latest release
        env:
          GH_TOKEN: ${{ secrets.KANDJI_POSTMAN_TO_OPENAPI_TOKEN }}
        run: |
          gh release download \
            --repo "MScottBlake/kandji-postman-to-openapi" \
            --pattern "kandji_openapi\.yaml" \
            --output "kandji_openapi.yaml"
          echo "openapi_file=kandji_openapi.yaml" >> ${GITHUB_ENV}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi_file
          path: ${{ env.openapi_file }}

      - name: Set up OpenAPI Generator
        run: |
          # Run OpenAPI Generator
          docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli:latest generate \
            -i /local/${{ env.openapi_file}} \
            -g "${{ env.LANGUAGE }}" \
            -o "/local"

      - name: Delete OpenAPI file
        run: |
          rm -rf "${{ env.openapi_file }}"

      - name: Commit and Push to GitHub
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Automated SDK update for latest OpenAPI release"
          git push

      - name: Create GitHub Release
        if: success()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag="sdk-update-$(date +'%Y%m%d%H%M%S')"
          gh release create "${tag}" \
            --title "Automated SDK Update $(date +'%Y-%m-%d %H:%M:%S')" \
            --generate-notes \
            --latest
