# coding: utf-8

"""
    Kandji API

    Welcome to the Kandji API Documentation =======================================    You can find your API URL in Settings \\> Access. The API URL will follow the below formats.   * US \\- `https://SubDomain.api.kandji.io` * EU \\- `https://SubDomain.api.eu.kandji.io`    For information on how to obtain an API token, please refer to the following support article.   <https://support.kandji.io/api>   #### Rate Limit    The Kandji API currently has an API rate limit of 10,000 requests per hour per customer.   #### Request Methods   HTTP request methods supported by the Kandji API.     | Method | Definition | | --- | --- | | GET | The `GET` method requests a representation of the specified resource. | | POST | The `POST` method submits an entity to the specified resource. | | PATCH | The `PATCH` method applies partial modifications to a resource. | | DELETE | The `DELETE` method deletes the specified resource. |   #### Response codes   Not all response codes apply to every endpoint.     | Code | Response | | --- | --- | | 200 | OK | | 201 | Created | | 204 | No content | |  | Typical response when sending the DELETE method. | | 400 | Bad Request | |  | 'Command already running' \\- The command may already be running in a *Pending* state waiting on the device. | |  | 'Command is not allowed for current device' \\- The command may not be compatible with the target device. | |  | 'JSON parse error \\- Expecting ',' delimiter: line 3 column 2 (char 65\\)' | | 401 | Unauthorized | |  | This error can occur if the token is incorrect, was revoked, or the token has expired. |  | 403 | Forbidden | |  | The request was understood but cannot be authorized. | | 404 | Not found | |  | Unable to locate the resource in the Kandji tenant. | | 415 | Unsupported Media Type | |  | The request contains a media type which the server or resource does not support. | | 500 | Internal server error |  | 503 | Service unavailable | |  | This error can occur if a file upload is still being processed via the custom apps API. |   #### Data structure   The API returns all structured responses in JSON schema format.   #### Examples    Code examples using the API can be found in the Kandji support [GitHub](https://github.com/kandji-inc/support/tree/main/api-tools).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated

from kandji_python_sdk.api_client import ApiClient, RequestSerialized
from kandji_python_sdk.api_response import ApiResponse
from kandji_python_sdk.rest import RESTResponseType


class DeviceInformationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def cancel_lost_mode(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Cancel Lost Mode

        This endpoint can be used to send a cancelation request if Lost Mode is in an error state for a given iOS or iPadOS device.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_lost_mode_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_lost_mode_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Cancel Lost Mode

        This endpoint can be used to send a cancelation request if Lost Mode is in an error state for a given iOS or iPadOS device.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_lost_mode_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_lost_mode_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel Lost Mode

        This endpoint can be used to send a cancelation request if Lost Mode is in an error state for a given iOS or iPadOS device.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_lost_mode_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_lost_mode_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v1/devices/{device_id}/details/lostmode',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_activity(
        self,
        device_id: StrictStr,
        limit: Annotated[StrictStr, Field(description="A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results.")],
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Activity

        This request returns the device activity for a specified Device ID.

        :param device_id: (required)
        :type device_id: str
        :param limit: A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results. (required)
        :type limit: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_activity_serialize(
            device_id=device_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_activity_with_http_info(
        self,
        device_id: StrictStr,
        limit: Annotated[StrictStr, Field(description="A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results.")],
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Activity

        This request returns the device activity for a specified Device ID.

        :param device_id: (required)
        :type device_id: str
        :param limit: A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results. (required)
        :type limit: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_activity_serialize(
            device_id=device_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_activity_without_preload_content(
        self,
        device_id: StrictStr,
        limit: Annotated[StrictStr, Field(description="A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results.")],
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Activity

        This request returns the device activity for a specified Device ID.

        :param device_id: (required)
        :type device_id: str
        :param limit: A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results. (required)
        :type limit: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_activity_serialize(
            device_id=device_id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_activity_serialize(
        self,
        device_id,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/activity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_apps(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Apps

        This request returns a list of all installed apps for a specified Device ID.   For iPhone and iPad, the preinstalled Apple apps are not reported.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_apps_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_apps_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Apps

        This request returns a list of all installed apps for a specified Device ID.   For iPhone and iPad, the preinstalled Apple apps are not reported.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_apps_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_apps_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Apps

        This request returns a list of all installed apps for a specified Device ID.   For iPhone and iPad, the preinstalled Apple apps are not reported.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_apps_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_apps_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/apps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_details(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Details

        This request returns the device details for a specified Device ID.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_details_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_details_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Details

        This request returns the device details for a specified Device ID.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_details_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_details_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Details

        This request returns the device details for a specified Device ID.

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_details_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_details_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_library_items(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Library Items

        This request gets all library items and their statuses for a specified Device ID   #### Possible library item status values     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | AVAILABLE | string | Library item available in Self Service | | CACHED | string | Library item downloaded for install but not yet installed | | CHANGE\\_PENDING | string | Recovery Password library item has changes that have not yet been applied | | DOWNLOADING | string | Library item downloading | | ERROR | string | Audit failure | | EXCLUDED | string | Not in scope for assignment rule |  | INCOMPATIBLE | string | Not compatible with device or OS version | | INSTALLING | string | Library item installing | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device, not yet installed (All library items except for config profiles) | | failed | string | Configuration profile failed to install | | pending | string | Waiting on device, Configuration profile not yet installed | | success | string | Configuration profile installed |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_library_items_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_library_items_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Library Items

        This request gets all library items and their statuses for a specified Device ID   #### Possible library item status values     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | AVAILABLE | string | Library item available in Self Service | | CACHED | string | Library item downloaded for install but not yet installed | | CHANGE\\_PENDING | string | Recovery Password library item has changes that have not yet been applied | | DOWNLOADING | string | Library item downloading | | ERROR | string | Audit failure | | EXCLUDED | string | Not in scope for assignment rule |  | INCOMPATIBLE | string | Not compatible with device or OS version | | INSTALLING | string | Library item installing | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device, not yet installed (All library items except for config profiles) | | failed | string | Configuration profile failed to install | | pending | string | Waiting on device, Configuration profile not yet installed | | success | string | Configuration profile installed |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_library_items_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_library_items_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Library Items

        This request gets all library items and their statuses for a specified Device ID   #### Possible library item status values     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | AVAILABLE | string | Library item available in Self Service | | CACHED | string | Library item downloaded for install but not yet installed | | CHANGE\\_PENDING | string | Recovery Password library item has changes that have not yet been applied | | DOWNLOADING | string | Library item downloading | | ERROR | string | Audit failure | | EXCLUDED | string | Not in scope for assignment rule |  | INCOMPATIBLE | string | Not compatible with device or OS version | | INSTALLING | string | Library item installing | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device, not yet installed (All library items except for config profiles) | | failed | string | Configuration profile failed to install | | pending | string | Waiting on device, Configuration profile not yet installed | | success | string | Configuration profile installed |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_library_items_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_library_items_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/library-items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_lost_mode_details(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Lost Mode details

        This request returns the device lost mode details for a specified Device ID.   **Note**: Lost Mode is is only available for iOS and iPadOS. For more information, please see this [Kandji support artilcle](https://support.kandji.io/a/solutions/articles/72000573873).

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_lost_mode_details_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_lost_mode_details_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Lost Mode details

        This request returns the device lost mode details for a specified Device ID.   **Note**: Lost Mode is is only available for iOS and iPadOS. For more information, please see this [Kandji support artilcle](https://support.kandji.io/a/solutions/articles/72000573873).

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_lost_mode_details_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_lost_mode_details_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Lost Mode details

        This request returns the device lost mode details for a specified Device ID.   **Note**: Lost Mode is is only available for iOS and iPadOS. For more information, please see this [Kandji support artilcle](https://support.kandji.io/a/solutions/articles/72000573873).

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_lost_mode_details_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_lost_mode_details_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/details/lostmode',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_parameters(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Parameters

        This request returns the parameters and their statuses for a specified Device ID   This endpoint is only applicable to macOS clients.   The parameters will be returned as a list of IDs. These IDs can be correlated with the parameter names available here: [https://github.com/kandji\\-inc/support/wiki/Devices\\ -API\\-\\-\\-Parameter\\-Correlations](https://github.com/kandji-inc/support/wiki/Devices-API---Parameter-Correlations)    **Possible parameter status values**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | ERROR | string | Audit failure | | INCOMPATIBLE | string | Not compatible with device or OS version |  | PASS | string | Device meets requirements | | PENDING | string | Waiting on device. Not yet run. | | REMEDIATED | string | Parameter remediated |  | WARNING | string | Muted alert |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_parameters_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_parameters_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Parameters

        This request returns the parameters and their statuses for a specified Device ID   This endpoint is only applicable to macOS clients.   The parameters will be returned as a list of IDs. These IDs can be correlated with the parameter names available here: [https://github.com/kandji\\-inc/support/wiki/Devices\\ -API\\-\\-\\-Parameter\\-Correlations](https://github.com/kandji-inc/support/wiki/Devices-API---Parameter-Correlations)    **Possible parameter status values**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | ERROR | string | Audit failure | | INCOMPATIBLE | string | Not compatible with device or OS version |  | PASS | string | Device meets requirements | | PENDING | string | Waiting on device. Not yet run. | | REMEDIATED | string | Parameter remediated |  | WARNING | string | Muted alert |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_parameters_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_parameters_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Parameters

        This request returns the parameters and their statuses for a specified Device ID   This endpoint is only applicable to macOS clients.   The parameters will be returned as a list of IDs. These IDs can be correlated with the parameter names available here: [https://github.com/kandji\\-inc/support/wiki/Devices\\ -API\\-\\-\\-Parameter\\-Correlations](https://github.com/kandji-inc/support/wiki/Devices-API---Parameter-Correlations)    **Possible parameter status values**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | ERROR | string | Audit failure | | INCOMPATIBLE | string | Not compatible with device or OS version |  | PASS | string | Device meets requirements | | PENDING | string | Waiting on device. Not yet run. | | REMEDIATED | string | Parameter remediated |  | WARNING | string | Muted alert |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_parameters_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_parameters_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/parameters',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_status(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Device Status

        This request returns the full status (parameters and library items) for a specified Device ID.   The parameters will be returned as a list of IDs. These IDs can be correlated with the parameter names available here: [https://github.com/kandji\\-inc/support/wiki/Devices\\-API\\-\\-\\-Parameter\\ -Correlations](https://github.com/kandji-inc/support/wiki/Devices-API---Parameter-Correlations)    #### Possible status values   **Library items**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | AVAILABLE | string | Library item available in Self Service | | ERROR | string | Audit failure | | EXCLUDED | string | Not in scope for assignment rule | | INCOMPATIBLE | string | Not compatible with device or OS version | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device, not yet installed (All library items except for config profiles) | | failed | string | Configuration profile failed to install | | pending | string | Waiting on device, Configuration profile not yet installed | | success | string | Configuration profile installed |   **Parameters**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | ERROR | string | Audit failure | | INCOMPATIBLE | string | Not compatible with device or OS version | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device. Not yet run. | | REMEDIATED | string | Parameter remediated | | WARNING | string | Muted alert |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_status_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_status_with_http_info(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Device Status

        This request returns the full status (parameters and library items) for a specified Device ID.   The parameters will be returned as a list of IDs. These IDs can be correlated with the parameter names available here: [https://github.com/kandji\\-inc/support/wiki/Devices\\-API\\-\\-\\-Parameter\\ -Correlations](https://github.com/kandji-inc/support/wiki/Devices-API---Parameter-Correlations)    #### Possible status values   **Library items**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | AVAILABLE | string | Library item available in Self Service | | ERROR | string | Audit failure | | EXCLUDED | string | Not in scope for assignment rule | | INCOMPATIBLE | string | Not compatible with device or OS version | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device, not yet installed (All library items except for config profiles) | | failed | string | Configuration profile failed to install | | pending | string | Waiting on device, Configuration profile not yet installed | | success | string | Configuration profile installed |   **Parameters**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | ERROR | string | Audit failure | | INCOMPATIBLE | string | Not compatible with device or OS version | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device. Not yet run. | | REMEDIATED | string | Parameter remediated | | WARNING | string | Muted alert |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_status_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_status_without_preload_content(
        self,
        device_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Status

        This request returns the full status (parameters and library items) for a specified Device ID.   The parameters will be returned as a list of IDs. These IDs can be correlated with the parameter names available here: [https://github.com/kandji\\-inc/support/wiki/Devices\\-API\\-\\-\\-Parameter\\ -Correlations](https://github.com/kandji-inc/support/wiki/Devices-API---Parameter-Correlations)    #### Possible status values   **Library items**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | AVAILABLE | string | Library item available in Self Service | | ERROR | string | Audit failure | | EXCLUDED | string | Not in scope for assignment rule | | INCOMPATIBLE | string | Not compatible with device or OS version | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device, not yet installed (All library items except for config profiles) | | failed | string | Configuration profile failed to install | | pending | string | Waiting on device, Configuration profile not yet installed | | success | string | Configuration profile installed |   **Parameters**     | **Value** | **Type** | **Additional Info** | | --- | --- | --- | | ERROR | string | Audit failure | | INCOMPATIBLE | string | Not compatible with device or OS version | | PASS | string | Device meets requirements | | PENDING | string | Waiting on device. Not yet run. | | REMEDIATED | string | Parameter remediated | | WARNING | string | Muted alert |

        :param device_id: (required)
        :type device_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_status_serialize(
            device_id=device_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_status_serialize(
        self,
        device_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_id is not None:
            _path_params['device_id'] = device_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices/{device_id}/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_devices(
        self,
        limit: Annotated[StrictStr, Field(description="A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results.")],
        asset_tag: Optional[StrictStr] = None,
        blueprint_id: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the specified blueprint id")] = None,
        device_id: Optional[StrictStr] = None,
        device_name: Optional[StrictStr] = None,
        filevault_enabled: Annotated[Optional[StrictStr], Field(description="Query for devices that either have FileVault on (true) or off (false). This parameter only applies to macOS.    An empty list \\`\\ []\\` will be returned if no devices are found with the given parameter value.")] = None,
        mac_address: Annotated[Optional[StrictStr], Field(description="Search for a specific device by MAC address")] = None,
        model: Annotated[Optional[StrictStr], Field(description="Return model results 'containing' the specified model string.")] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="The \\`ordering\\` parameter can be used to define how the device records are ordered in the response. Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\ `?ordering\\=\\-serial\\_number\\` will order the response by serial\\\\ \\_number in descending order.   \\*\\*Possible values\\*\\*   \\ * \\`asset\\_tag\\` \\* \\`blueprint\\_id\\` \\* \\`device\\_id\\` \\ * \\`device\\_name\\` \\* \\`last\\_check\\_in\\` \\\\\\- agent checkin  \\* \\`model\\` \\* \\`platform\\` \\* \\`os\\_version\\` \\* \\`serial\\ _number\\` \\* \\`user\\`   Additionally, multiple values can be combined in a comma separated list to further customize the ordering of the response.   \\`?ordering\\=serial\\_number,platform\\`")] = None,
        os_version: Annotated[Optional[StrictStr], Field(description="Return all device records with the specified OS version")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Return all records matching a specific platform. Possible values:\\`Mac\\`, \\`iPad\\`, \\`iPhone\\`, \\`AppleTV\\`")] = None,
        serial_number: Annotated[Optional[StrictStr], Field(description="Search for a specific device by Serial Number. If partial serial number is provided in the query, all device containing the partial string will be returned.")] = None,
        tag_name: Annotated[Optional[StrictStr], Field(description="Return results for given tag name. Case sensitive.")] = None,
        tag_name_in: Annotated[Optional[StrictStr], Field(description="Return results for given tag names separate by commas. Case sensitive.")] = None,
        tag_id: Annotated[Optional[StrictStr], Field(description="Search for a tag by its ID. Case sensitive.")] = None,
        tag_id_in: Annotated[Optional[StrictStr], Field(description="Return results for given tag IDs separated by commas. Case sensitive.")] = None,
        user: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the user name")] = None,
        user_email: Annotated[Optional[StrictStr], Field(description="Return results 'containing' search on email address")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="'exact' match on kandji user ID number")] = None,
        user_name: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the assigned user Display Name")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """List Devices

        This request returns a list of devices in a Kandji tenant. Optionally. query parameters can be used to filter results.   There is a hard upper limit of 300 results per request. To return addtional results pagination must be used. Pagination examples can be found in the Kandji support [GitHub](https://github.com/kandji-inc/support/tree/main/api-tools/code-examples).

        :param limit: A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results. (required)
        :type limit: str
        :param asset_tag: 
        :type asset_tag: str
        :param blueprint_id: Return results 'containing' the specified blueprint id
        :type blueprint_id: str
        :param device_id: 
        :type device_id: str
        :param device_name: 
        :type device_name: str
        :param filevault_enabled: Query for devices that either have FileVault on (true) or off (false). This parameter only applies to macOS.    An empty list \\`\\ []\\` will be returned if no devices are found with the given parameter value.
        :type filevault_enabled: str
        :param mac_address: Search for a specific device by MAC address
        :type mac_address: str
        :param model: Return model results 'containing' the specified model string.
        :type model: str
        :param ordering: The \\`ordering\\` parameter can be used to define how the device records are ordered in the response. Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\ `?ordering\\=\\-serial\\_number\\` will order the response by serial\\\\ \\_number in descending order.   \\*\\*Possible values\\*\\*   \\ * \\`asset\\_tag\\` \\* \\`blueprint\\_id\\` \\* \\`device\\_id\\` \\ * \\`device\\_name\\` \\* \\`last\\_check\\_in\\` \\\\\\- agent checkin  \\* \\`model\\` \\* \\`platform\\` \\* \\`os\\_version\\` \\* \\`serial\\ _number\\` \\* \\`user\\`   Additionally, multiple values can be combined in a comma separated list to further customize the ordering of the response.   \\`?ordering\\=serial\\_number,platform\\`
        :type ordering: str
        :param os_version: Return all device records with the specified OS version
        :type os_version: str
        :param platform: Return all records matching a specific platform. Possible values:\\`Mac\\`, \\`iPad\\`, \\`iPhone\\`, \\`AppleTV\\`
        :type platform: str
        :param serial_number: Search for a specific device by Serial Number. If partial serial number is provided in the query, all device containing the partial string will be returned.
        :type serial_number: str
        :param tag_name: Return results for given tag name. Case sensitive.
        :type tag_name: str
        :param tag_name_in: Return results for given tag names separate by commas. Case sensitive.
        :type tag_name_in: str
        :param tag_id: Search for a tag by its ID. Case sensitive.
        :type tag_id: str
        :param tag_id_in: Return results for given tag IDs separated by commas. Case sensitive.
        :type tag_id_in: str
        :param user: Return results 'containing' the user name
        :type user: str
        :param user_email: Return results 'containing' search on email address
        :type user_email: str
        :param user_id: 'exact' match on kandji user ID number
        :type user_id: str
        :param user_name: Return results 'containing' the assigned user Display Name
        :type user_name: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_devices_serialize(
            limit=limit,
            asset_tag=asset_tag,
            blueprint_id=blueprint_id,
            device_id=device_id,
            device_name=device_name,
            filevault_enabled=filevault_enabled,
            mac_address=mac_address,
            model=model,
            ordering=ordering,
            os_version=os_version,
            platform=platform,
            serial_number=serial_number,
            tag_name=tag_name,
            tag_name_in=tag_name_in,
            tag_id=tag_id,
            tag_id_in=tag_id_in,
            user=user,
            user_email=user_email,
            user_id=user_id,
            user_name=user_name,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_devices_with_http_info(
        self,
        limit: Annotated[StrictStr, Field(description="A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results.")],
        asset_tag: Optional[StrictStr] = None,
        blueprint_id: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the specified blueprint id")] = None,
        device_id: Optional[StrictStr] = None,
        device_name: Optional[StrictStr] = None,
        filevault_enabled: Annotated[Optional[StrictStr], Field(description="Query for devices that either have FileVault on (true) or off (false). This parameter only applies to macOS.    An empty list \\`\\ []\\` will be returned if no devices are found with the given parameter value.")] = None,
        mac_address: Annotated[Optional[StrictStr], Field(description="Search for a specific device by MAC address")] = None,
        model: Annotated[Optional[StrictStr], Field(description="Return model results 'containing' the specified model string.")] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="The \\`ordering\\` parameter can be used to define how the device records are ordered in the response. Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\ `?ordering\\=\\-serial\\_number\\` will order the response by serial\\\\ \\_number in descending order.   \\*\\*Possible values\\*\\*   \\ * \\`asset\\_tag\\` \\* \\`blueprint\\_id\\` \\* \\`device\\_id\\` \\ * \\`device\\_name\\` \\* \\`last\\_check\\_in\\` \\\\\\- agent checkin  \\* \\`model\\` \\* \\`platform\\` \\* \\`os\\_version\\` \\* \\`serial\\ _number\\` \\* \\`user\\`   Additionally, multiple values can be combined in a comma separated list to further customize the ordering of the response.   \\`?ordering\\=serial\\_number,platform\\`")] = None,
        os_version: Annotated[Optional[StrictStr], Field(description="Return all device records with the specified OS version")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Return all records matching a specific platform. Possible values:\\`Mac\\`, \\`iPad\\`, \\`iPhone\\`, \\`AppleTV\\`")] = None,
        serial_number: Annotated[Optional[StrictStr], Field(description="Search for a specific device by Serial Number. If partial serial number is provided in the query, all device containing the partial string will be returned.")] = None,
        tag_name: Annotated[Optional[StrictStr], Field(description="Return results for given tag name. Case sensitive.")] = None,
        tag_name_in: Annotated[Optional[StrictStr], Field(description="Return results for given tag names separate by commas. Case sensitive.")] = None,
        tag_id: Annotated[Optional[StrictStr], Field(description="Search for a tag by its ID. Case sensitive.")] = None,
        tag_id_in: Annotated[Optional[StrictStr], Field(description="Return results for given tag IDs separated by commas. Case sensitive.")] = None,
        user: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the user name")] = None,
        user_email: Annotated[Optional[StrictStr], Field(description="Return results 'containing' search on email address")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="'exact' match on kandji user ID number")] = None,
        user_name: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the assigned user Display Name")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """List Devices

        This request returns a list of devices in a Kandji tenant. Optionally. query parameters can be used to filter results.   There is a hard upper limit of 300 results per request. To return addtional results pagination must be used. Pagination examples can be found in the Kandji support [GitHub](https://github.com/kandji-inc/support/tree/main/api-tools/code-examples).

        :param limit: A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results. (required)
        :type limit: str
        :param asset_tag: 
        :type asset_tag: str
        :param blueprint_id: Return results 'containing' the specified blueprint id
        :type blueprint_id: str
        :param device_id: 
        :type device_id: str
        :param device_name: 
        :type device_name: str
        :param filevault_enabled: Query for devices that either have FileVault on (true) or off (false). This parameter only applies to macOS.    An empty list \\`\\ []\\` will be returned if no devices are found with the given parameter value.
        :type filevault_enabled: str
        :param mac_address: Search for a specific device by MAC address
        :type mac_address: str
        :param model: Return model results 'containing' the specified model string.
        :type model: str
        :param ordering: The \\`ordering\\` parameter can be used to define how the device records are ordered in the response. Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\ `?ordering\\=\\-serial\\_number\\` will order the response by serial\\\\ \\_number in descending order.   \\*\\*Possible values\\*\\*   \\ * \\`asset\\_tag\\` \\* \\`blueprint\\_id\\` \\* \\`device\\_id\\` \\ * \\`device\\_name\\` \\* \\`last\\_check\\_in\\` \\\\\\- agent checkin  \\* \\`model\\` \\* \\`platform\\` \\* \\`os\\_version\\` \\* \\`serial\\ _number\\` \\* \\`user\\`   Additionally, multiple values can be combined in a comma separated list to further customize the ordering of the response.   \\`?ordering\\=serial\\_number,platform\\`
        :type ordering: str
        :param os_version: Return all device records with the specified OS version
        :type os_version: str
        :param platform: Return all records matching a specific platform. Possible values:\\`Mac\\`, \\`iPad\\`, \\`iPhone\\`, \\`AppleTV\\`
        :type platform: str
        :param serial_number: Search for a specific device by Serial Number. If partial serial number is provided in the query, all device containing the partial string will be returned.
        :type serial_number: str
        :param tag_name: Return results for given tag name. Case sensitive.
        :type tag_name: str
        :param tag_name_in: Return results for given tag names separate by commas. Case sensitive.
        :type tag_name_in: str
        :param tag_id: Search for a tag by its ID. Case sensitive.
        :type tag_id: str
        :param tag_id_in: Return results for given tag IDs separated by commas. Case sensitive.
        :type tag_id_in: str
        :param user: Return results 'containing' the user name
        :type user: str
        :param user_email: Return results 'containing' search on email address
        :type user_email: str
        :param user_id: 'exact' match on kandji user ID number
        :type user_id: str
        :param user_name: Return results 'containing' the assigned user Display Name
        :type user_name: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_devices_serialize(
            limit=limit,
            asset_tag=asset_tag,
            blueprint_id=blueprint_id,
            device_id=device_id,
            device_name=device_name,
            filevault_enabled=filevault_enabled,
            mac_address=mac_address,
            model=model,
            ordering=ordering,
            os_version=os_version,
            platform=platform,
            serial_number=serial_number,
            tag_name=tag_name,
            tag_name_in=tag_name_in,
            tag_id=tag_id,
            tag_id_in=tag_id_in,
            user=user,
            user_email=user_email,
            user_id=user_id,
            user_name=user_name,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_devices_without_preload_content(
        self,
        limit: Annotated[StrictStr, Field(description="A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results.")],
        asset_tag: Optional[StrictStr] = None,
        blueprint_id: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the specified blueprint id")] = None,
        device_id: Optional[StrictStr] = None,
        device_name: Optional[StrictStr] = None,
        filevault_enabled: Annotated[Optional[StrictStr], Field(description="Query for devices that either have FileVault on (true) or off (false). This parameter only applies to macOS.    An empty list \\`\\ []\\` will be returned if no devices are found with the given parameter value.")] = None,
        mac_address: Annotated[Optional[StrictStr], Field(description="Search for a specific device by MAC address")] = None,
        model: Annotated[Optional[StrictStr], Field(description="Return model results 'containing' the specified model string.")] = None,
        ordering: Annotated[Optional[StrictStr], Field(description="The \\`ordering\\` parameter can be used to define how the device records are ordered in the response. Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\ `?ordering\\=\\-serial\\_number\\` will order the response by serial\\\\ \\_number in descending order.   \\*\\*Possible values\\*\\*   \\ * \\`asset\\_tag\\` \\* \\`blueprint\\_id\\` \\* \\`device\\_id\\` \\ * \\`device\\_name\\` \\* \\`last\\_check\\_in\\` \\\\\\- agent checkin  \\* \\`model\\` \\* \\`platform\\` \\* \\`os\\_version\\` \\* \\`serial\\ _number\\` \\* \\`user\\`   Additionally, multiple values can be combined in a comma separated list to further customize the ordering of the response.   \\`?ordering\\=serial\\_number,platform\\`")] = None,
        os_version: Annotated[Optional[StrictStr], Field(description="Return all device records with the specified OS version")] = None,
        platform: Annotated[Optional[StrictStr], Field(description="Return all records matching a specific platform. Possible values:\\`Mac\\`, \\`iPad\\`, \\`iPhone\\`, \\`AppleTV\\`")] = None,
        serial_number: Annotated[Optional[StrictStr], Field(description="Search for a specific device by Serial Number. If partial serial number is provided in the query, all device containing the partial string will be returned.")] = None,
        tag_name: Annotated[Optional[StrictStr], Field(description="Return results for given tag name. Case sensitive.")] = None,
        tag_name_in: Annotated[Optional[StrictStr], Field(description="Return results for given tag names separate by commas. Case sensitive.")] = None,
        tag_id: Annotated[Optional[StrictStr], Field(description="Search for a tag by its ID. Case sensitive.")] = None,
        tag_id_in: Annotated[Optional[StrictStr], Field(description="Return results for given tag IDs separated by commas. Case sensitive.")] = None,
        user: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the user name")] = None,
        user_email: Annotated[Optional[StrictStr], Field(description="Return results 'containing' search on email address")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="'exact' match on kandji user ID number")] = None,
        user_name: Annotated[Optional[StrictStr], Field(description="Return results 'containing' the assigned user Display Name")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Devices

        This request returns a list of devices in a Kandji tenant. Optionally. query parameters can be used to filter results.   There is a hard upper limit of 300 results per request. To return addtional results pagination must be used. Pagination examples can be found in the Kandji support [GitHub](https://github.com/kandji-inc/support/tree/main/api-tools/code-examples).

        :param limit: A hard upper \\`limit\\` is set at 300 device records returned per request. If more device records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters. Additionally, parameter queries can be added to a request to limit the results. (required)
        :type limit: str
        :param asset_tag: 
        :type asset_tag: str
        :param blueprint_id: Return results 'containing' the specified blueprint id
        :type blueprint_id: str
        :param device_id: 
        :type device_id: str
        :param device_name: 
        :type device_name: str
        :param filevault_enabled: Query for devices that either have FileVault on (true) or off (false). This parameter only applies to macOS.    An empty list \\`\\ []\\` will be returned if no devices are found with the given parameter value.
        :type filevault_enabled: str
        :param mac_address: Search for a specific device by MAC address
        :type mac_address: str
        :param model: Return model results 'containing' the specified model string.
        :type model: str
        :param ordering: The \\`ordering\\` parameter can be used to define how the device records are ordered in the response. Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\ `?ordering\\=\\-serial\\_number\\` will order the response by serial\\\\ \\_number in descending order.   \\*\\*Possible values\\*\\*   \\ * \\`asset\\_tag\\` \\* \\`blueprint\\_id\\` \\* \\`device\\_id\\` \\ * \\`device\\_name\\` \\* \\`last\\_check\\_in\\` \\\\\\- agent checkin  \\* \\`model\\` \\* \\`platform\\` \\* \\`os\\_version\\` \\* \\`serial\\ _number\\` \\* \\`user\\`   Additionally, multiple values can be combined in a comma separated list to further customize the ordering of the response.   \\`?ordering\\=serial\\_number,platform\\`
        :type ordering: str
        :param os_version: Return all device records with the specified OS version
        :type os_version: str
        :param platform: Return all records matching a specific platform. Possible values:\\`Mac\\`, \\`iPad\\`, \\`iPhone\\`, \\`AppleTV\\`
        :type platform: str
        :param serial_number: Search for a specific device by Serial Number. If partial serial number is provided in the query, all device containing the partial string will be returned.
        :type serial_number: str
        :param tag_name: Return results for given tag name. Case sensitive.
        :type tag_name: str
        :param tag_name_in: Return results for given tag names separate by commas. Case sensitive.
        :type tag_name_in: str
        :param tag_id: Search for a tag by its ID. Case sensitive.
        :type tag_id: str
        :param tag_id_in: Return results for given tag IDs separated by commas. Case sensitive.
        :type tag_id_in: str
        :param user: Return results 'containing' the user name
        :type user: str
        :param user_email: Return results 'containing' search on email address
        :type user_email: str
        :param user_id: 'exact' match on kandji user ID number
        :type user_id: str
        :param user_name: Return results 'containing' the assigned user Display Name
        :type user_name: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_devices_serialize(
            limit=limit,
            asset_tag=asset_tag,
            blueprint_id=blueprint_id,
            device_id=device_id,
            device_name=device_name,
            filevault_enabled=filevault_enabled,
            mac_address=mac_address,
            model=model,
            ordering=ordering,
            os_version=os_version,
            platform=platform,
            serial_number=serial_number,
            tag_name=tag_name,
            tag_name_in=tag_name_in,
            tag_id=tag_id,
            tag_id_in=tag_id_in,
            user=user,
            user_email=user_email,
            user_id=user_id,
            user_name=user_name,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_devices_serialize(
        self,
        limit,
        asset_tag,
        blueprint_id,
        device_id,
        device_name,
        filevault_enabled,
        mac_address,
        model,
        ordering,
        os_version,
        platform,
        serial_number,
        tag_name,
        tag_name_in,
        tag_id,
        tag_id_in,
        user,
        user_email,
        user_id,
        user_name,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if asset_tag is not None:
            
            _query_params.append(('asset_tag', asset_tag))
            
        if blueprint_id is not None:
            
            _query_params.append(('blueprint_id', blueprint_id))
            
        if device_id is not None:
            
            _query_params.append(('device_id', device_id))
            
        if device_name is not None:
            
            _query_params.append(('device_name', device_name))
            
        if filevault_enabled is not None:
            
            _query_params.append(('filevault_enabled', filevault_enabled))
            
        if mac_address is not None:
            
            _query_params.append(('mac_address', mac_address))
            
        if model is not None:
            
            _query_params.append(('model', model))
            
        if ordering is not None:
            
            _query_params.append(('ordering', ordering))
            
        if os_version is not None:
            
            _query_params.append(('os_version', os_version))
            
        if platform is not None:
            
            _query_params.append(('platform', platform))
            
        if serial_number is not None:
            
            _query_params.append(('serial_number', serial_number))
            
        if tag_name is not None:
            
            _query_params.append(('tag_name', tag_name))
            
        if tag_name_in is not None:
            
            _query_params.append(('tag_name_in', tag_name_in))
            
        if tag_id is not None:
            
            _query_params.append(('tag_id', tag_id))
            
        if tag_id_in is not None:
            
            _query_params.append(('tag_id_in', tag_id_in))
            
        if user is not None:
            
            _query_params.append(('user', user))
            
        if user_email is not None:
            
            _query_params.append(('user_email', user_email))
            
        if user_id is not None:
            
            _query_params.append(('user_id', user_id))
            
        if user_name is not None:
            
            _query_params.append(('user_name', user_name))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/devices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


