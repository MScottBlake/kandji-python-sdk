# coding: utf-8

"""
    Kandji API

    Welcome to the Kandji API Documentation =======================================    You can find your API URL in Settings \\> Access. The API URL will follow the below formats.   * US \\- `https://SubDomain.api.kandji.io` * EU \\- `https://SubDomain.api.eu.kandji.io`    For information on how to obtain an API token, please refer to the following support article.   <https://support.kandji.io/api>   #### Rate Limit    The Kandji API currently has an API rate limit of 10,000 requests per hour per customer.   #### Request Methods   HTTP request methods supported by the Kandji API.     | Method | Definition | | --- | --- | | GET | The `GET` method requests a representation of the specified resource. | | POST | The `POST` method submits an entity to the specified resource. | | PATCH | The `PATCH` method applies partial modifications to a resource. | | DELETE | The `DELETE` method deletes the specified resource. |   #### Response codes   Not all response codes apply to every endpoint.     | Code | Response | | --- | --- | | 200 | OK | | 201 | Created | | 204 | No content | |  | Typical response when sending the DELETE method. | | 400 | Bad Request | |  | 'Command already running' \\- The command may already be running in a *Pending* state waiting on the device. | |  | 'Command is not allowed for current device' \\- The command may not be compatible with the target device. | |  | 'JSON parse error \\- Expecting ',' delimiter: line 3 column 2 (char 65\\)' | | 401 | Unauthorized | |  | This error can occur if the token is incorrect, was revoked, or the token has expired. |  | 403 | Forbidden | |  | The request was understood but cannot be authorized. | | 404 | Not found | |  | Unable to locate the resource in the Kandji tenant. | | 415 | Unsupported Media Type | |  | The request contains a media type which the server or resource does not support. | | 500 | Internal server error |  | 503 | Service unavailable | |  | This error can occur if a file upload is still being processed via the custom apps API. |   #### Data structure   The API returns all structured responses in JSON schema format.   #### Examples    Code examples using the API can be found in the Kandji support [GitHub](https://github.com/kandji-inc/support/tree/main/api-tools).

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Dict, Optional
from typing_extensions import Annotated

from kandji_python_sdk.api_client import ApiClient, RequestSerialized
from kandji_python_sdk.api_response import ApiResponse
from kandji_python_sdk.rest import RESTResponseType


class ThreatsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_threat_details(
        self,
        classification: Annotated[Optional[StrictStr], Field(description="Return all records matching a specified classification. The following classification options are available: \\`malware\\` and \\`pup\\`. Leave this parameter empty to return all classification types.")] = None,
        date_range: Annotated[Optional[StrictStr], Field(description="Return all records within a specified number of days. Any positive number of days may be specified. Examples: \\`7\\`, \\`30\\`, \\`60\\`, \\`90\\`, \\`180\\`, or \\`365\\`.")] = None,
        device_id: Optional[StrictStr] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return all records matching a specified status. The following status options are available: \\`quarantined\\`, \\`not\\_quarantined\\`, or \\`released\\`. Leave this parameter empty to return all status types.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Results can be sorted with the following options:    \\* threat\\\\\\_name \\* classification \\* device\\\\\\_name \\* process\\ \\\\_name \\* process\\\\\\_owner \\* detection\\\\\\_date \\* status    Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\`?sort\\_by\\=\\-device\\_name\\` will order the response by device\\\\\\_name in descending order.")] = None,
        term: Annotated[Optional[StrictStr], Field(description="Search term to filter threat results.   The response will include anything matching the following fields: \\`device\\_name\\`, \\ `file\\_hash\\`, and \\`file\\_path\\`.   So if you search for \\`bad file\\`, the results will include anywhere \\`bad file\\` exists in the three fields above.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="A hard upper \\`limit\\` is set at 1000 records returned per request. If more records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters.    Additionally, parameter queries can be added to a request to limit the results.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Get Threat Details

        Get threat details.

        :param classification: Return all records matching a specified classification. The following classification options are available: \\`malware\\` and \\`pup\\`. Leave this parameter empty to return all classification types.
        :type classification: str
        :param date_range: Return all records within a specified number of days. Any positive number of days may be specified. Examples: \\`7\\`, \\`30\\`, \\`60\\`, \\`90\\`, \\`180\\`, or \\`365\\`.
        :type date_range: str
        :param device_id: 
        :type device_id: str
        :param status: Return all records matching a specified status. The following status options are available: \\`quarantined\\`, \\`not\\_quarantined\\`, or \\`released\\`. Leave this parameter empty to return all status types.
        :type status: str
        :param sort_by: Results can be sorted with the following options:    \\* threat\\\\\\_name \\* classification \\* device\\\\\\_name \\* process\\ \\\\_name \\* process\\\\\\_owner \\* detection\\\\\\_date \\* status    Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\`?sort\\_by\\=\\-device\\_name\\` will order the response by device\\\\\\_name in descending order.
        :type sort_by: str
        :param term: Search term to filter threat results.   The response will include anything matching the following fields: \\`device\\_name\\`, \\ `file\\_hash\\`, and \\`file\\_path\\`.   So if you search for \\`bad file\\`, the results will include anywhere \\`bad file\\` exists in the three fields above.
        :type term: str
        :param limit: A hard upper \\`limit\\` is set at 1000 records returned per request. If more records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters.    Additionally, parameter queries can be added to a request to limit the results.
        :type limit: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_threat_details_serialize(
            classification=classification,
            date_range=date_range,
            device_id=device_id,
            status=status,
            sort_by=sort_by,
            term=term,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_threat_details_with_http_info(
        self,
        classification: Annotated[Optional[StrictStr], Field(description="Return all records matching a specified classification. The following classification options are available: \\`malware\\` and \\`pup\\`. Leave this parameter empty to return all classification types.")] = None,
        date_range: Annotated[Optional[StrictStr], Field(description="Return all records within a specified number of days. Any positive number of days may be specified. Examples: \\`7\\`, \\`30\\`, \\`60\\`, \\`90\\`, \\`180\\`, or \\`365\\`.")] = None,
        device_id: Optional[StrictStr] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return all records matching a specified status. The following status options are available: \\`quarantined\\`, \\`not\\_quarantined\\`, or \\`released\\`. Leave this parameter empty to return all status types.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Results can be sorted with the following options:    \\* threat\\\\\\_name \\* classification \\* device\\\\\\_name \\* process\\ \\\\_name \\* process\\\\\\_owner \\* detection\\\\\\_date \\* status    Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\`?sort\\_by\\=\\-device\\_name\\` will order the response by device\\\\\\_name in descending order.")] = None,
        term: Annotated[Optional[StrictStr], Field(description="Search term to filter threat results.   The response will include anything matching the following fields: \\`device\\_name\\`, \\ `file\\_hash\\`, and \\`file\\_path\\`.   So if you search for \\`bad file\\`, the results will include anywhere \\`bad file\\` exists in the three fields above.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="A hard upper \\`limit\\` is set at 1000 records returned per request. If more records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters.    Additionally, parameter queries can be added to a request to limit the results.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Get Threat Details

        Get threat details.

        :param classification: Return all records matching a specified classification. The following classification options are available: \\`malware\\` and \\`pup\\`. Leave this parameter empty to return all classification types.
        :type classification: str
        :param date_range: Return all records within a specified number of days. Any positive number of days may be specified. Examples: \\`7\\`, \\`30\\`, \\`60\\`, \\`90\\`, \\`180\\`, or \\`365\\`.
        :type date_range: str
        :param device_id: 
        :type device_id: str
        :param status: Return all records matching a specified status. The following status options are available: \\`quarantined\\`, \\`not\\_quarantined\\`, or \\`released\\`. Leave this parameter empty to return all status types.
        :type status: str
        :param sort_by: Results can be sorted with the following options:    \\* threat\\\\\\_name \\* classification \\* device\\\\\\_name \\* process\\ \\\\_name \\* process\\\\\\_owner \\* detection\\\\\\_date \\* status    Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\`?sort\\_by\\=\\-device\\_name\\` will order the response by device\\\\\\_name in descending order.
        :type sort_by: str
        :param term: Search term to filter threat results.   The response will include anything matching the following fields: \\`device\\_name\\`, \\ `file\\_hash\\`, and \\`file\\_path\\`.   So if you search for \\`bad file\\`, the results will include anywhere \\`bad file\\` exists in the three fields above.
        :type term: str
        :param limit: A hard upper \\`limit\\` is set at 1000 records returned per request. If more records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters.    Additionally, parameter queries can be added to a request to limit the results.
        :type limit: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_threat_details_serialize(
            classification=classification,
            date_range=date_range,
            device_id=device_id,
            status=status,
            sort_by=sort_by,
            term=term,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_threat_details_without_preload_content(
        self,
        classification: Annotated[Optional[StrictStr], Field(description="Return all records matching a specified classification. The following classification options are available: \\`malware\\` and \\`pup\\`. Leave this parameter empty to return all classification types.")] = None,
        date_range: Annotated[Optional[StrictStr], Field(description="Return all records within a specified number of days. Any positive number of days may be specified. Examples: \\`7\\`, \\`30\\`, \\`60\\`, \\`90\\`, \\`180\\`, or \\`365\\`.")] = None,
        device_id: Optional[StrictStr] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return all records matching a specified status. The following status options are available: \\`quarantined\\`, \\`not\\_quarantined\\`, or \\`released\\`. Leave this parameter empty to return all status types.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Results can be sorted with the following options:    \\* threat\\\\\\_name \\* classification \\* device\\\\\\_name \\* process\\ \\\\_name \\* process\\\\\\_owner \\* detection\\\\\\_date \\* status    Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\`?sort\\_by\\=\\-device\\_name\\` will order the response by device\\\\\\_name in descending order.")] = None,
        term: Annotated[Optional[StrictStr], Field(description="Search term to filter threat results.   The response will include anything matching the following fields: \\`device\\_name\\`, \\ `file\\_hash\\`, and \\`file\\_path\\`.   So if you search for \\`bad file\\`, the results will include anywhere \\`bad file\\` exists in the three fields above.")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="A hard upper \\`limit\\` is set at 1000 records returned per request. If more records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters.    Additionally, parameter queries can be added to a request to limit the results.")] = None,
        offset: Annotated[Optional[StrictStr], Field(description="Specify the starting record to return")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Threat Details

        Get threat details.

        :param classification: Return all records matching a specified classification. The following classification options are available: \\`malware\\` and \\`pup\\`. Leave this parameter empty to return all classification types.
        :type classification: str
        :param date_range: Return all records within a specified number of days. Any positive number of days may be specified. Examples: \\`7\\`, \\`30\\`, \\`60\\`, \\`90\\`, \\`180\\`, or \\`365\\`.
        :type date_range: str
        :param device_id: 
        :type device_id: str
        :param status: Return all records matching a specified status. The following status options are available: \\`quarantined\\`, \\`not\\_quarantined\\`, or \\`released\\`. Leave this parameter empty to return all status types.
        :type status: str
        :param sort_by: Results can be sorted with the following options:    \\* threat\\\\\\_name \\* classification \\* device\\\\\\_name \\* process\\ \\\\_name \\* process\\\\\\_owner \\* detection\\\\\\_date \\* status    Prepending a dash (\\\\\\-) to the parameter value will reverse the order of the returned results.   \\`?sort\\_by\\=\\-device\\_name\\` will order the response by device\\\\\\_name in descending order.
        :type sort_by: str
        :param term: Search term to filter threat results.   The response will include anything matching the following fields: \\`device\\_name\\`, \\ `file\\_hash\\`, and \\`file\\_path\\`.   So if you search for \\`bad file\\`, the results will include anywhere \\`bad file\\` exists in the three fields above.
        :type term: str
        :param limit: A hard upper \\`limit\\` is set at 1000 records returned per request. If more records are expected, pagination should be used using the \\`limit\\` and \\`offset\\` parameters.    Additionally, parameter queries can be added to a request to limit the results.
        :type limit: str
        :param offset: Specify the starting record to return
        :type offset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_threat_details_serialize(
            classification=classification,
            date_range=date_range,
            device_id=device_id,
            status=status,
            sort_by=sort_by,
            term=term,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_threat_details_serialize(
        self,
        classification,
        date_range,
        device_id,
        status,
        sort_by,
        term,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if classification is not None:
            
            _query_params.append(('classification', classification))
            
        if date_range is not None:
            
            _query_params.append(('date_range', date_range))
            
        if device_id is not None:
            
            _query_params.append(('device_id', device_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if term is not None:
            
            _query_params.append(('term', term))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/threat-details',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


